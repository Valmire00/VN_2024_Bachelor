name: Lint, Build, and Check JSON Tokens

on:
  pull_request:
    branches:
      - main
    paths:
      - 'tokens/*.json'

permissions:
  contents: write
  pull-requests: write

jobs:
  lint-build-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json  # LÃ¶scht node_modules und package-lock.json
          npm install
          npm install jsondiffpatch

      - name: Check JSON syntax
        run: |
          for file in tokens/*.json; do
            echo "Checking $file"
            cat "$file" | jq empty
          done

      - name: Build CSS from JSON tokens
        run: node build.mjs

      - name: List dist/theme directory
        run: ls -la dist/theme

      - name: Run Stylelint
        run: npx stylelint 'dist/theme/*.css' --fix

      - name: Initialize old tokens if not present
        run: |
          mkdir -p old_tokens
          if [ -z "$(ls -A old_tokens)" ]; then
            cp tokens/* old_tokens/
          fi

      - name: Debug - List tokens and old_tokens directories
        run: |
          echo "Listing files in tokens directory:"
          ls -la tokens/
          echo "Listing files in old_tokens directory:"
          ls -la old_tokens/

      - name: Detect JSON changes
        run: node detect_changes.mjs tokens/ old_tokens/ detected_changes.json

      - name: Categorize JSON changes
        run: node categorize_changes.mjs detected_changes.json categorized_changes.txt

      - name: List output file for debugging
        run: ls -la categorized_changes.txt

      - name: Copy new tokens to old tokens
        run: |
          rm -rf old_tokens/*
          cp -r tokens/* old_tokens/

      - name: Upload categorized changes
        uses: actions/upload-artifact@v2
        with:
          name: categorized-changes
          path: categorized_changes.txt
          if-no-files-found: warn

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Post comment to PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "$(cat categorized_changes.txt)"

      - name: Commit and push changes
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          BRANCH_NAME=${{ github.head_ref }}
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m 'Apply automated fixes and updates'
          git pull origin $BRANCH_NAME --rebase || git rebase --abort
          git push origin HEAD:$BRANCH_NAME
